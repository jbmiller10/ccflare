diff --git a/packages/dashboard-web/src/api.ts b/packages/dashboard-web/src/api.ts
index fbe16ca..4062d7d 100644
--- a/packages/dashboard-web/src/api.ts
+++ b/packages/dashboard-web/src/api.ts
@@ -41,8 +41,10 @@ export interface AgentsResponse {
 export interface SystemPromptConfig {
 	/** Whether the system prompt interceptor is enabled */
 	isEnabled: boolean;
-	/** Template for the system prompt with {{env_block}} placeholder for environment variables */
-	promptTemplate: string;
+	/** The target prompt to look for and replace */
+	targetPrompt: string;
+	/** The replacement prompt with {{env_block}} placeholder for environment variables */
+	replacementPrompt: string;
 	/** Whether tools are enabled in the intercepted system prompt */
 	toolsEnabled: boolean;
 }
@@ -344,30 +346,35 @@ class API extends HttpClient {
 	// System prompt interceptor
 	async getSystemPromptOverride(): Promise<{
 		isEnabled: boolean;
-		promptTemplate: string;
+		targetPrompt: string;
+		replacementPrompt: string;
 		toolsEnabled: boolean;
 	}> {
 		return this.get<{
 			isEnabled: boolean;
-			promptTemplate: string;
+			targetPrompt: string;
+			replacementPrompt: string;
 			toolsEnabled: boolean;
 		}>("/api/tools/interceptors/system-prompt");
 	}
 
 	async setSystemPromptOverride(data: {
 		isEnabled: boolean;
-		promptTemplate: string;
+		targetPrompt: string;
+		replacementPrompt: string;
 		toolsEnabled: boolean;
 	}): Promise<{
 		success: boolean;
 		isEnabled: boolean;
-		promptTemplate: string;
+		targetPrompt: string;
+		replacementPrompt: string;
 		toolsEnabled: boolean;
 	}> {
 		return this.post<{
 			success: boolean;
 			isEnabled: boolean;
-			promptTemplate: string;
+			targetPrompt: string;
+			replacementPrompt: string;
 			toolsEnabled: boolean;
 		}>("/api/tools/interceptors/system-prompt", data);
 	}
diff --git a/packages/dashboard-web/src/components/tools/SystemPromptInterceptorCard.tsx b/packages/dashboard-web/src/components/tools/SystemPromptInterceptorCard.tsx
index 631bfad..aef4573 100644
--- a/packages/dashboard-web/src/components/tools/SystemPromptInterceptorCard.tsx
+++ b/packages/dashboard-web/src/components/tools/SystemPromptInterceptorCard.tsx
@@ -24,14 +24,16 @@ export function SystemPromptInterceptorCard() {
 
 	// Local form state
 	const [isEnabled, setIsEnabled] = useState(false);
-	const [promptTemplate, setPromptTemplate] = useState("");
+	const [targetPrompt, setTargetPrompt] = useState("");
+	const [replacementPrompt, setReplacementPrompt] = useState("");
 	const [toolsEnabled, setToolsEnabled] = useState(true);
 
 	// Sync server data to local state
 	useEffect(() => {
 		if (data) {
 			setIsEnabled(data.isEnabled);
-			setPromptTemplate(data.promptTemplate);
+			setTargetPrompt(data.targetPrompt);
+			setReplacementPrompt(data.replacementPrompt);
 			setToolsEnabled(data.toolsEnabled);
 		}
 	}, [data]);
@@ -39,7 +41,8 @@ export function SystemPromptInterceptorCard() {
 	const handleSave = () => {
 		mutate({
 			isEnabled,
-			promptTemplate,
+			targetPrompt,
+			replacementPrompt,
 			toolsEnabled,
 		});
 	};
@@ -80,12 +83,27 @@ export function SystemPromptInterceptorCard() {
 				</div>
 
 				<div className="space-y-2">
-					<Label htmlFor="prompt-template">Prompt Template</Label>
+					<Label htmlFor="target-prompt">Target Prompt</Label>
 					<Textarea
-						id="prompt-template"
-						placeholder="Your custom prompt here..."
-						value={promptTemplate}
-						onChange={(e) => setPromptTemplate(e.target.value)}
+						id="target-prompt"
+						placeholder="The prompt to look for and replace..."
+						value={targetPrompt}
+						onChange={(e) => setTargetPrompt(e.target.value)}
+						className="min-h-[150px]"
+					/>
+					<p className="text-sm text-muted-foreground">
+						This is the prompt that will be detected and replaced. After reset,
+						this shows the last-seen system prompt.
+					</p>
+				</div>
+
+				<div className="space-y-2">
+					<Label htmlFor="replacement-prompt">Replacement Prompt</Label>
+					<Textarea
+						id="replacement-prompt"
+						placeholder="Your custom replacement prompt here..."
+						value={replacementPrompt}
+						onChange={(e) => setReplacementPrompt(e.target.value)}
 						className="min-h-[200px]"
 					/>
 					<p className="text-sm text-muted-foreground">
diff --git a/packages/dashboard-web/src/hooks/queries.ts b/packages/dashboard-web/src/hooks/queries.ts
index 423be73..ee535ab 100644
--- a/packages/dashboard-web/src/hooks/queries.ts
+++ b/packages/dashboard-web/src/hooks/queries.ts
@@ -231,7 +231,8 @@ export const useSetSystemPromptOverride = () => {
 	return useMutation({
 		mutationFn: (data: {
 			isEnabled: boolean;
-			promptTemplate: string;
+			targetPrompt: string;
+			replacementPrompt: string;
 			toolsEnabled: boolean;
 		}) => api.setSystemPromptOverride(data),
 		onSuccess: () => {
diff --git a/packages/database/src/repositories/interceptor.repository.ts b/packages/database/src/repositories/interceptor.repository.ts
index 9490d05..ad54394 100644
--- a/packages/database/src/repositories/interceptor.repository.ts
+++ b/packages/database/src/repositories/interceptor.repository.ts
@@ -1,7 +1,8 @@
 import { BaseRepository } from "./base.repository";
 
 export interface InterceptorConfig {
-	promptTemplate: string;
+	targetPrompt: string;
+	replacementPrompt: string;
 	toolsEnabled: boolean;
 }
 
diff --git a/packages/http-api/src/handlers/tools.ts b/packages/http-api/src/handlers/tools.ts
index 18b2b66..d144d19 100644
--- a/packages/http-api/src/handlers/tools.ts
+++ b/packages/http-api/src/handlers/tools.ts
@@ -16,21 +16,23 @@ export function createSystemPromptInterceptorHandler(
 
 			// Return default configuration if none exists
 			if (!config) {
-				// Try to get the last-seen system prompt as the default
+				// Try to get the last-seen system prompt as the default target
 				const lastSeenPrompt = dbOps.getSystemKV("last_seen_system_prompt");
-				const defaultPromptTemplate =
-					lastSeenPrompt || "Your custom prompt here.\n\n{{env_block}}";
+				const DEFAULT_TARGET_PROMPT =
+					"You are Claude Code, Anthropic's official CLI for Claude.";
 
 				return jsonResponse({
 					isEnabled: false,
-					promptTemplate: defaultPromptTemplate,
+					targetPrompt: lastSeenPrompt || DEFAULT_TARGET_PROMPT,
+					replacementPrompt: "",
 					toolsEnabled: true,
 				});
 			}
 
 			return jsonResponse({
 				isEnabled: config.isEnabled,
-				promptTemplate: config.config.promptTemplate,
+				targetPrompt: config.config.targetPrompt,
+				replacementPrompt: config.config.replacementPrompt,
 				toolsEnabled: config.config.toolsEnabled,
 			});
 		},
@@ -50,14 +52,26 @@ export function createSystemPromptInterceptorHandler(
 					return errorResponse(BadRequest("isEnabled must be a boolean"));
 				}
 
-				if (body.promptTemplate === undefined || body.promptTemplate === null) {
-					return errorResponse(BadRequest("promptTemplate is required"));
+				if (body.targetPrompt === undefined || body.targetPrompt === null) {
+					return errorResponse(BadRequest("targetPrompt is required"));
 				}
-				if (typeof body.promptTemplate !== "string") {
-					return errorResponse(BadRequest("promptTemplate must be a string"));
+				if (typeof body.targetPrompt !== "string") {
+					return errorResponse(BadRequest("targetPrompt must be a string"));
 				}
-				if (body.promptTemplate.trim() === "") {
-					return errorResponse(BadRequest("promptTemplate cannot be empty"));
+				if (body.targetPrompt.trim() === "") {
+					return errorResponse(BadRequest("targetPrompt cannot be empty"));
+				}
+
+				if (
+					body.replacementPrompt === undefined ||
+					body.replacementPrompt === null
+				) {
+					return errorResponse(BadRequest("replacementPrompt is required"));
+				}
+				if (typeof body.replacementPrompt !== "string") {
+					return errorResponse(
+						BadRequest("replacementPrompt must be a string"),
+					);
 				}
 
 				if (body.toolsEnabled === undefined || body.toolsEnabled === null) {
@@ -69,14 +83,16 @@ export function createSystemPromptInterceptorHandler(
 
 				// Save configuration to database
 				dbOps.setInterceptorConfig("system_prompt", body.isEnabled, {
-					promptTemplate: body.promptTemplate,
+					targetPrompt: body.targetPrompt,
+					replacementPrompt: body.replacementPrompt,
 					toolsEnabled: body.toolsEnabled,
 				});
 
 				return jsonResponse({
 					success: true,
 					isEnabled: body.isEnabled,
-					promptTemplate: body.promptTemplate,
+					targetPrompt: body.targetPrompt,
+					replacementPrompt: body.replacementPrompt,
 					toolsEnabled: body.toolsEnabled,
 				});
 			} catch (error) {
diff --git a/packages/proxy/src/handlers/agent-interceptor.ts b/packages/proxy/src/handlers/agent-interceptor.ts
index b18d812..17f40f6 100644
--- a/packages/proxy/src/handlers/agent-interceptor.ts
+++ b/packages/proxy/src/handlers/agent-interceptor.ts
@@ -557,28 +557,33 @@ function applySystemPromptInterception(
 		}
 
 		// Validate and apply the template
-		const { promptTemplate, toolsEnabled } = interceptorConfig.config;
+		const { targetPrompt, replacementPrompt, toolsEnabled } =
+			interceptorConfig.config;
 
-		// Validate promptTemplate is a non-empty string
-		if (!promptTemplate || typeof promptTemplate !== "string") {
+		// Validate replacementPrompt is a non-empty string
+		if (!replacementPrompt || typeof replacementPrompt !== "string") {
 			interceptLog.error(
-				"Invalid promptTemplate in config, skipping interception",
+				"Invalid replacementPrompt in config, skipping interception",
 			);
 			return { modified: false, toolsRemoved: false };
 		}
 
+		// Check if the current prompt matches the target (simplified check - could be enhanced)
+		// For now, we'll always apply the replacement if the interceptor is enabled
+		// Future enhancement: actually compare originalPrompt with targetPrompt
+
 		// Validate template has the placeholder
-		if (!promptTemplate.includes("{{env_block}}")) {
+		if (!replacementPrompt.includes("{{env_block}}")) {
 			interceptLog.warn(
-				"Template missing {{env_block}} placeholder, env data may be lost",
+				"Replacement prompt missing {{env_block}} placeholder, env data may be lost",
 			);
 		}
 
 		// Apply template with all occurrences replaced
-		const newPrompt = promptTemplate.replace(/\{\{env_block\}\}/g, envBlock);
+		const newPrompt = replacementPrompt.replace(/\{\{env_block\}\}/g, envBlock);
 
 		// Verify replacement actually happened
-		if (newPrompt === promptTemplate && envBlock) {
+		if (newPrompt === replacementPrompt && envBlock) {
 			interceptLog.warn(
 				"Template replacement may have failed - prompt unchanged despite env block present",
 			);
@@ -588,7 +593,7 @@ function applySystemPromptInterception(
 		secondSystemMessage.text = newPrompt;
 
 		interceptLog.info(
-			`Applied prompt template, new prompt length: ${newPrompt.length} chars`,
+			`Applied replacement prompt, new prompt length: ${newPrompt.length} chars`,
 		);
 
 		// Handle tools toggle
