diff --git a/packages/dashboard-web/src/api.ts b/packages/dashboard-web/src/api.ts
index e379e41..fbe16ca 100644
--- a/packages/dashboard-web/src/api.ts
+++ b/packages/dashboard-web/src/api.ts
@@ -371,6 +371,10 @@ class API extends HttpClient {
 			toolsEnabled: boolean;
 		}>("/api/tools/interceptors/system-prompt", data);
 	}
+
+	async resetSystemPromptOverride(): Promise<void> {
+		await this.delete("/api/tools/interceptors/system-prompt");
+	}
 }
 
 export const api = new API();
diff --git a/packages/dashboard-web/src/components/tools/SystemPromptInterceptorCard.tsx b/packages/dashboard-web/src/components/tools/SystemPromptInterceptorCard.tsx
index 9bb3d35..631bfad 100644
--- a/packages/dashboard-web/src/components/tools/SystemPromptInterceptorCard.tsx
+++ b/packages/dashboard-web/src/components/tools/SystemPromptInterceptorCard.tsx
@@ -1,5 +1,6 @@
 import { useEffect, useState } from "react";
 import {
+	useResetSystemPromptOverride,
 	useSetSystemPromptOverride,
 	useSystemPromptOverride,
 } from "../../hooks/queries";
@@ -19,6 +20,7 @@ import { Textarea } from "../ui/textarea";
 export function SystemPromptInterceptorCard() {
 	const { data, isLoading } = useSystemPromptOverride();
 	const { mutate, isPending, isSuccess } = useSetSystemPromptOverride();
+	const { mutate: resetMutate } = useResetSystemPromptOverride();
 
 	// Local form state
 	const [isEnabled, setIsEnabled] = useState(false);
@@ -110,10 +112,13 @@ export function SystemPromptInterceptorCard() {
 					/>
 				</div>
 			</CardContent>
-			<CardFooter>
+			<CardFooter className="flex gap-2">
 				<Button onClick={handleSave} disabled={isPending}>
 					{isPending ? "Saving..." : isSuccess ? "Saved!" : "Save"}
 				</Button>
+				<Button variant="outline" onClick={() => resetMutate()}>
+					Reset to Default
+				</Button>
 			</CardFooter>
 		</Card>
 	);
diff --git a/packages/dashboard-web/src/hooks/queries.ts b/packages/dashboard-web/src/hooks/queries.ts
index 0f23057..423be73 100644
--- a/packages/dashboard-web/src/hooks/queries.ts
+++ b/packages/dashboard-web/src/hooks/queries.ts
@@ -1,6 +1,5 @@
 import type { AgentUpdatePayload } from "@ccflare/types";
 import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
-import type { SystemPromptConfig } from "../api";
 import { api } from "../api";
 import { REFRESH_INTERVALS } from "../constants";
 import { queryKeys } from "../lib/query-keys";
@@ -242,3 +241,15 @@ export const useSetSystemPromptOverride = () => {
 		},
 	});
 };
+
+export const useResetSystemPromptOverride = () => {
+	const queryClient = useQueryClient();
+	return useMutation({
+		mutationFn: () => api.resetSystemPromptOverride(),
+		onSuccess: () => {
+			queryClient.invalidateQueries({
+				queryKey: queryKeys.systemPromptOverride(),
+			});
+		},
+	});
+};
diff --git a/packages/database/src/database-operations.ts b/packages/database/src/database-operations.ts
index 0ac6f07..086ea6a 100644
--- a/packages/database/src/database-operations.ts
+++ b/packages/database/src/database-operations.ts
@@ -374,6 +374,10 @@ export class DatabaseOperations implements StrategyStore, Disposable {
 		this.interceptor.setConfig(id, isEnabled, config);
 	}
 
+	deleteInterceptorConfig(id: string): boolean {
+		return this.interceptor.delete(id);
+	}
+
 	// System KV operations delegated to repository
 	getSystemKV(key: string): string | null {
 		return this.systemKV.getValue(key);
diff --git a/packages/database/src/repositories/interceptor.repository.ts b/packages/database/src/repositories/interceptor.repository.ts
index 3406c7a..9490d05 100644
--- a/packages/database/src/repositories/interceptor.repository.ts
+++ b/packages/database/src/repositories/interceptor.repository.ts
@@ -39,4 +39,15 @@ export class InterceptorRepository extends BaseRepository<InterceptorRow> {
 			[id, isEnabledInt, configJson],
 		);
 	}
+
+	/**
+	 * Delete an interceptor configuration
+	 */
+	delete(id: string): boolean {
+		const changes = this.runWithChanges(
+			"DELETE FROM interceptors WHERE id = ?",
+			[id],
+		);
+		return changes > 0;
+	}
 }
diff --git a/packages/http-api/src/handlers/tools.ts b/packages/http-api/src/handlers/tools.ts
index d8cb22a..18b2b66 100644
--- a/packages/http-api/src/handlers/tools.ts
+++ b/packages/http-api/src/handlers/tools.ts
@@ -16,9 +16,14 @@ export function createSystemPromptInterceptorHandler(
 
 			// Return default configuration if none exists
 			if (!config) {
+				// Try to get the last-seen system prompt as the default
+				const lastSeenPrompt = dbOps.getSystemKV("last_seen_system_prompt");
+				const defaultPromptTemplate =
+					lastSeenPrompt || "Your custom prompt here.\n\n{{env_block}}";
+
 				return jsonResponse({
 					isEnabled: false,
-					promptTemplate: "Your custom prompt here.\n\n{{env_block}}",
+					promptTemplate: defaultPromptTemplate,
 					toolsEnabled: true,
 				});
 			}
@@ -81,5 +86,17 @@ export function createSystemPromptInterceptorHandler(
 				throw error;
 			}
 		},
+
+		/**
+		 * Reset system prompt interceptor configuration
+		 */
+		resetSystemPromptConfig: (): Response => {
+			// Delete the interceptor config, which will cause the GET endpoint
+			// to return the default state with last-seen prompt
+			dbOps.deleteInterceptorConfig("system_prompt");
+
+			// Return 204 No Content to indicate successful deletion
+			return new Response(null, { status: 204 });
+		},
 	};
 }
diff --git a/packages/http-api/src/router.ts b/packages/http-api/src/router.ts
index b6857fe..db9a121 100644
--- a/packages/http-api/src/router.ts
+++ b/packages/http-api/src/router.ts
@@ -156,6 +156,9 @@ export class APIRouter {
 		this.handlers.set("POST:/api/tools/interceptors/system-prompt", (req) =>
 			toolsHandler.setSystemPromptConfig(req),
 		);
+		this.handlers.set("DELETE:/api/tools/interceptors/system-prompt", () =>
+			toolsHandler.resetSystemPromptConfig(),
+		);
 	}
 
 	/**
diff --git a/packages/proxy/src/handlers/agent-interceptor.ts b/packages/proxy/src/handlers/agent-interceptor.ts
index 4038e81..b18d812 100644
--- a/packages/proxy/src/handlers/agent-interceptor.ts
+++ b/packages/proxy/src/handlers/agent-interceptor.ts
@@ -527,6 +527,14 @@ function applySystemPromptInterception(
 			return { modified: false, toolsRemoved: false };
 		}
 
+		// Capture the original system prompt before any modifications
+		const originalPrompt = secondSystemMessage.text;
+
+		// Update last-seen prompt in next tick (truly non-blocking)
+		setImmediate(() => {
+			_updateLastSeenPrompt(originalPrompt, dbOps);
+		});
+
 		// Extract the <env> block(s) from the original system prompt
 		// Using global regex to find all env blocks
 		const envBlockRegex = /<env>([\s\S]*?)<\/env>/g;
@@ -600,3 +608,33 @@ function applySystemPromptInterception(
 		return { modified: false, toolsRemoved: false };
 	}
 }
+
+/**
+ * Updates the last-seen system prompt in the database if it has changed.
+ * This is a non-critical synchronous operation that logs errors but doesn't throw.
+ * Should be called via setImmediate to avoid blocking the request.
+ *
+ * @param prompt - The original system prompt to store
+ * @param dbOps - Database operations instance
+ */
+function _updateLastSeenPrompt(
+	prompt: string,
+	dbOps: DatabaseOperations,
+): void {
+	const updateLog = new Logger("UpdateLastSeenPrompt");
+
+	try {
+		const lastSeen = dbOps.getSystemKV("last_seen_system_prompt");
+
+		// Only update if the prompt has changed
+		if (prompt !== lastSeen) {
+			dbOps.setSystemKV("last_seen_system_prompt", prompt);
+			updateLog.info("Updated last-seen system prompt in database");
+		} else {
+			updateLog.info("System prompt unchanged, skipping database update");
+		}
+	} catch (error) {
+		// Log error but don't throw - this is a non-critical background operation
+		updateLog.error("Failed to update last-seen system prompt:", error);
+	}
+}
