<roadmap name="configurableSystemPromptInterceptor" version="1.1">
<context>
This roadmap outlines the implementation of a new "Tools" page in the dashboard. The primary tool will be a System Prompt Interceptor. This tool will allow users to replace the main agent's system prompt using a template, preserving dynamic blocks like environment details. It will also allow globally enabling or disabling the `tools` array in the API request. The logic will be designed to specifically target the main agent's prompt while ignoring prompts for subagents.
</context>
<risks_and_alternatives>
- **Risk:** The logic for identifying the "main agent" prompt relies on specific introductory text. If this text changes in a future version of the client, the interceptor will fail to match. This will be documented.
- **Risk:** The regex for extracting dynamic blocks (like `<env>`) must be robust enough to handle variations in whitespace.
- **Alternative Considered:** Storing each section of the system prompt as a separate, togglable database entry. Rejected due to high implementation complexity and a less intuitive user experience compared to a single template field.
</risks_and_alternatives>

<ticket id="BE-01" depends_on="ROOT" is_breaking_change="false">
    <title>DB: Create 'interceptors' Table for Tools Configuration</title>
    <description>
        This ticket adds a new database table named `interceptors` to store configuration for request interception tools. The schema is designed to support a new, more flexible system prompt configuration that includes a template and a toggle for tool usage.
    </description>
    <implementation_notes>
        1.  Open `packages/database/src/migrations.ts`.
        2.  In the `ensureSchema` function, add a `CREATE TABLE IF NOT EXISTS` statement for a new table called `interceptors`.
        3.  The table should have the following columns:
            -   `id` (TEXT, PRIMARY KEY): A unique identifier for the interceptor (e.g., 'system_prompt').
            -   `is_enabled` (INTEGER, NOT NULL, DEFAULT 0): A boolean flag (0 for false, 1 for true) to toggle the interceptor.
            -   `config` (TEXT, NOT NULL): A JSON string to store tool-specific configuration. The structure for this tool will be `{"promptTemplate": "...", "toolsEnabled": true}`.
    </implementation_notes>
    <files>
        <file path="packages/database/src/migrations.ts" action="MODIFY">
            Add the `CREATE TABLE IF NOT EXISTS interceptors (...)` statement within the `ensureSchema` function. This table will store the configuration for the new interception tools.
        </file>
    </files>
    <verification_steps>
        -   Run the application.
        -   Using a SQLite client, confirm that the `interceptors` table exists with the specified columns (`id`, `is_enabled`, `config`).
    </verification_steps>
</ticket>

<ticket id="BE-02" depends_on="BE-01" is_breaking_change="false">
    <title>DB: Create InterceptorRepository and Expose in DatabaseOperations</title>
    <description>
        This ticket creates a new repository to manage the `interceptors` table and integrates it into the `DatabaseOperations` class. This follows the existing repository pattern and provides a structured way to access tool configurations.
    </description>
    <implementation_notes>
        1.  Create a new file `packages/database/src/repositories/interceptor.repository.ts`.
        2.  Define an `InterceptorConfig` interface: `{ promptTemplate: string; toolsEnabled: boolean; }`.
        3.  Create a new `InterceptorRepository` class that extends `BaseRepository`.
        4.  Implement the following methods in `InterceptorRepository`:
            -   `get(id: string): { isEnabled: boolean; config: InterceptorConfig } | null`: Fetches an interceptor's config, parses the `config` JSON string, and returns it.
            -   `set(id: string, isEnabled: boolean, config: InterceptorConfig): void`: Inserts or replaces an interceptor's config, stringifying the `config` object before saving.
        5.  Open `packages/database/src/database-operations.ts`.
        6.  Import `InterceptorRepository`.
        7.  Add a private `interceptor` property and instantiate it in the constructor.
        8.  Add public methods `getInterceptorConfig(id)` and `setInterceptorConfig(id, isEnabled, config)` that delegate to the new repository.
    </implementation_notes>
    <files>
        <file path="packages/database/src/repositories/interceptor.repository.ts" action="CREATE">
            Define and implement the `InterceptorRepository` class with `get` and `set` methods and the new `InterceptorConfig` interface.
        </file>
        <file path="packages/database/src/database-operations.ts" action="MODIFY">
            Import and instantiate `InterceptorRepository`. Add `getInterceptorConfig` and `setInterceptorConfig` methods to `DatabaseOperations`.
        </file>
    </files>
    <verification_steps>
        -   The code should compile without type errors.
        -   The new methods in `DatabaseOperations` should correctly call the repository methods.
    </verification_steps>
</ticket>

<ticket id="BE-03" depends_on="BE-02" is_breaking_change="false">
    <title>API: Create Endpoints for System Prompt Interceptor</title>
    <description>
        This ticket creates the backend API endpoints for managing the System Prompt Interceptor. The API will handle getting and setting the template, and the tool-enabled flag.
    </description>
    <implementation_notes>
        1.  Create a new handler file `packages/http-api/src/handlers/tools.ts`.
        2.  Implement a `createSystemPromptInterceptorHandler` function that takes `dbOps` as an argument.
        3.  Inside, create two handler functions:
            -   `getSystemPromptConfig()`: Calls `dbOps.getInterceptorConfig('system_prompt')`. If no config exists, return a default state: `{ isEnabled: false, promptTemplate: 'Your custom prompt here.\n\n{{env_block}}', toolsEnabled: true }`.
            -   `setSystemPromptConfig(req: Request)`: Parses the JSON body `{ isEnabled, promptTemplate, toolsEnabled }`, validates it, and saves it using `dbOps.setInterceptorConfig`.
        4.  Open `packages/http-api/src/router.ts`.
        5.  Import and register the new routes:
            -   `GET /api/tools/interceptors/system-prompt`
            -   `POST /api/tools/interceptors/system-prompt`
    </implementation_notes>
    <files>
        <file path="packages/http-api/src/handlers/tools.ts" action="CREATE">
            Implement the GET and POST handlers for managing the system prompt interceptor configuration.
        </file>
        <file path="packages/http-api/src/router.ts" action="MODIFY">
            Import the new tools handler and register the GET and POST routes.
        </file>
    </files>
    <verification_steps>
        -   Run the server.
        -   `curl http://localhost:8080/api/tools/interceptors/system-prompt` should return a default JSON object.
        -   `curl -X POST -H "Content-Type: application/json" -d '{"isEnabled":true, "promptTemplate":"new", "toolsEnabled": false}' http://localhost:8080/api/tools/interceptors/system-prompt` should succeed.
        -   A subsequent GET request should return the updated values.
    </verification_steps>
</ticket>

<ticket id="BE-04" depends_on="BE-03" is_breaking_change="false">
    <title>Proxy: Implement Configurable System Prompt Interception Logic</title>
    <description>
        This is the core logic for the feature. This ticket modifies the proxy to perform a sophisticated, template-based replacement of the system prompt for main agent requests, while preserving dynamic content and correctly ignoring subagent requests.
    </description>
    <implementation_notes>
        1.  Create a new file `packages/proxy/src/handlers/system-prompt-interceptor.ts`.
        2.  Export an async function: `applySystemPromptOverride(body: ArrayBuffer | null, dbOps: DatabaseOperations): Promise<ArrayBuffer | null>`.
        3.  Think step-by-step inside the function:
            a.  Fetch the interceptor config using `dbOps.getInterceptorConfig('system_prompt')`. If not enabled or config is missing, return the original body.
            b.  Gracefully parse the request body from `ArrayBuffer` to a JSON object. If parsing fails, log the error and return the original body.
            c.  **Identify the target request:** Check if `body.system` is an array and if `body.system[0]?.text` contains "You are Claude Code, Anthropic's official CLI for Claude.". Also check that it does NOT contain "You are an agent for Claude Code...", which indicates a subagent. If it's not a target request, return the original body.
            d.  **Extract dynamic content:** From the original `body.system[1]?.text`, use a regex like `/<env>([\s\S]*?)<\/env>/` to find and extract the full `<env>...</env>` block. If not found, use an empty string as a fallback.
            e.  **Apply template:** Take the `promptTemplate` from the DB config. Replace the placeholder `{{env_block}}` with the extracted environment block.
            f.  **Modify the body:** Update the `text` property of the second element in the `body.system` array (`body.system[1].text`) with the newly composed prompt string.
            g.  **Handle tools toggle:** Check the `toolsEnabled` flag from the DB config. If it is `false`, delete the `tools` property from the root of the `requestBody` object (`delete requestBody.tools`).
            h.  Re-serialize the modified `requestBody` object back into an `ArrayBuffer` and return it.
        4.  Open `packages/proxy/src/proxy.ts`.
        5.  In `handleProxy`, import and call your new `applySystemPromptOverride` function. This should happen *after* `prepareRequestBody` but *before* `interceptAndModifyRequest`.
    </implementation_notes>
    <files>
        <file path="packages/proxy/src/handlers/system-prompt-interceptor.ts" action="CREATE">
            Implement the `applySystemPromptOverride` function. This is the most critical part, containing the logic to identify requests, extract dynamic content, apply the template, and modify the request body.
        </file>
        <file path="packages/proxy/src/proxy.ts" action="MODIFY">
            Import and call `applySystemPromptOverride`. The data flow should be: `prepareRequestBody` -> `applySystemPromptOverride` -> `interceptAndModifyRequest`.
        </file>
    </files>
    <verification_steps>
        -   Enable the interceptor via the API, setting a template with `{{env_block}}`.
        -   Send a main agent proxy request. Verify the outgoing system prompt contains your template text with the original `<env>` block preserved.
        -   Send a subagent proxy request. Verify its system prompt is *not* modified.
        -   Disable the tool toggle via the API and verify the `tools` array is removed from main agent requests.
    </verification_steps>
</ticket>

<ticket id="FE-01" depends_on="BE-03" is_breaking_change="false">
    <title>FE: Create API Client Methods and React Query Hooks for Interceptor</title>
    <description>
        This ticket updates the frontend API client and React Query hooks to support the new configuration structure for the system prompt interceptor, which now includes a template and a tool toggle.
    </description>
    <implementation_notes>
        1.  In `packages/dashboard-web/src/api.ts`:
            -   Add a new interface `SystemPromptConfig` with `isEnabled: boolean`, `promptTemplate: string`, and `toolsEnabled: boolean`.
            -   Update `getSystemPromptOverride()` to return `Promise<SystemPromptConfig>`.
            -   Update `setSystemPromptOverride(config: SystemPromptConfig)` to send the full config object.
        2.  In `packages/dashboard-web/src/lib/query-keys.ts`:
            -   Add a new query key: `systemPromptOverride: () => [...queryKeys.all, "tools", "systemPromptOverride"] as const`.
        3.  In `packages/dashboard-web/src/hooks/queries.ts`:
            -   Create `useSystemPromptOverride()` (`useQuery`) and `useSetSystemPromptOverride()` (`useMutation`) hooks to manage the new `SystemPromptConfig` state, invalidating the query on mutation success.
    </implementation_notes>
    <files>
        <file path="packages/dashboard-web/src/api.ts" action="MODIFY">
            Add/update methods for getting and setting the system prompt interceptor config.
        </file>
        <file path="packages/dashboard-web/src/lib/query-keys.ts" action="MODIFY">
            Add a new query key for the interceptor configuration.
        </file>
        <file path="packages/dashboard-web/src/hooks/queries.ts" action="MODIFY">
            Add `useSystemPromptOverride` and `useSetSystemPromptOverride` hooks.
        </file>
    </files>
    <verification_steps>
        -   The application should compile without type errors.
    </verification_steps>
</ticket>

<ticket id="FE-02" depends_on="FE-01" is_breaking_change="false">
    <title>FE: Add "Tools" Page to Navigation and Routing</title>
    <description>
        This ticket adds a new "Tools" page to the dashboard's main navigation menu and sets up the corresponding route.
    </description>
    <implementation_notes>
        1.  In `packages/dashboard-web/src/components/navigation.tsx`:
            -   Import the `Wrench` icon from `lucide-react`.
            -   Add a new entry to the `navItems` array for "Tools" with the path `/tools`.
        2.  In `packages/dashboard-web/src/App.tsx`:
            -   Create a placeholder file for `ToolsTab.tsx` for now.
            -   Add a new route object to the `routes` array for the path `/tools`.
    </implementation_notes>
    <files>
        <file path="packages/dashboard-web/src/components/navigation.tsx" action="MODIFY">
            Add a "Tools" link to the sidebar navigation array.
        </file>
        <file path="packages/dashboard-web/src/App.tsx" action="MODIFY">
            Import the `ToolsTab` component and add a new route for it at `/tools`.
        </file>
        <file path="packages/dashboard-web/src/components/ToolsTab.tsx" action="CREATE">
            Create a new placeholder component `export function ToolsTab() { return <div>Tools Page</div>; }` to satisfy the import in `App.tsx`.
        </file>
    </files>
    <verification_steps>
        -   The dashboard should render a new "Tools" item in the sidebar.
        -   Clicking it should navigate to `/tools` and display the placeholder text.
    </verification_steps>
</ticket>

<ticket id="FE-03" depends_on="FE-02" is_breaking_change="false">
    <title>FE: Build the Tools Page and System Prompt Interceptor UI</title>
    <description>
        This ticket creates the full UI for the Tools page, allowing users to configure the System Prompt Interceptor with its new templating and tool-toggling capabilities.
    </description>
    <implementation_notes>
        1.  Create a new directory `packages/dashboard-web/src/components/tools`.
        2.  Create `packages/dashboard-web/src/components/tools/SystemPromptInterceptorCard.tsx`:
            -   Use `useState` for local form state (`isEnabled`, `promptTemplate`, `toolsEnabled`).
            -   Use the `useSystemPromptOverride` hook to fetch data and `useEffect` to sync it to local state.
            -   The UI should contain a `Card` with:
                -   A `CardHeader` with title and description.
                -   A `CardContent` containing:
                    -   A `Switch` to toggle `isEnabled`.
                    -   A `Textarea` for the `promptTemplate`.
                    -   A helper text below the textarea: "Use `{{env_block}}` to preserve the dynamic environment details from the original prompt."
                    -   A `Switch` to toggle `toolsEnabled`, labeled "Enable Tools".
                -   A `CardFooter` with a "Save" `Button`.
            -   The "Save" button should call the `mutate` function from the `useSetSystemPromptOverride` hook.
        3.  Update `packages/dashboard-web/src/components/ToolsTab.tsx` to render the `SystemPromptInterceptorCard`.
    </implementation_notes>
    <files>
        <file path="packages/dashboard-web/src/components/ToolsTab.tsx" action="MODIFY">
            Update the placeholder to render the `SystemPromptInterceptorCard`.
        </file>
        <file path="packages/dashboard-web/src/components/tools/SystemPromptInterceptorCard.tsx" action="CREATE">
            Create the UI card with switches for enabling the interceptor and tools, and a textarea for the prompt template.
        </file>
    </files>
    <verification_steps>
        -   Navigate to the `/tools` page.
        -   The interceptor card should be visible with all controls.
        -   The UI should reflect the current configuration from the backend.
        -   Changing settings and clicking "Save" should persist the changes.
        -   Refreshing the page should show the saved state.
    </verification_steps>
</ticket>



</roadmap>
